/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SystemAdminRole;

import BusinessLogic.Bean.ClimaticFactors;
import BusinessLogic.EcoSystem;
import BusinessLogic.Employee.Admin;
import BusinessLogic.Employee.Employee;
import BusinessLogic.Enterprise.Enterprise;
import BusinessLogic.Network.Network;
import BusinessLogic.Organization.Organization;
import BusinessLogic.Role.AdminRole;
import BusinessLogic.UserAccount.UserAccount;
import Constants.ReadFile;
import Util.Utility;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author nehal
 */
public class SystemAdminWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SystemAdminWorkAreaJPanel
     */
   JPanel userProcessContainer;
    EcoSystem system;

    /**
     * Creates new form AdminWorkAreaJPanel
     */
    public SystemAdminWorkAreaJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;

        populateTree();
        populateNetworkTable();
        populateEnterpriseTable();
        populateNetworkAndEnterpriseComboBox();
        populateEnterpriseAdminTable();
        populateNetworkComboBox();
        
        
         
    }

     public void populateTree() {
        
        DefaultTreeModel model = (DefaultTreeModel) JTree.getModel();

        
        
        ArrayList<Network> networkList = system.getNetworkList();
        ArrayList<Enterprise> enterpriseList;
        ArrayList<Organization> organizationList;
        Network network;
        Enterprise enterprise;
        Organization organization;

        DefaultMutableTreeNode networks = new DefaultMutableTreeNode("Networks");
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        root.removeAllChildren();
        root.insert(networks, 0);

        DefaultMutableTreeNode networkNode;
        DefaultMutableTreeNode enterpriseNode;
        DefaultMutableTreeNode organizationNode;
        for (int i = 0; i < networkList.size(); i++) {
            network = networkList.get(i);
            networkNode = new DefaultMutableTreeNode(network.getName());
            networks.insert(networkNode, i);

            enterpriseList = network.getEnterpriseDirectory().getEnterpriseList();

            for (int j = 0; j < enterpriseList.size(); j++) {
                enterprise = enterpriseList.get(j);
                enterpriseNode = new DefaultMutableTreeNode(enterprise.getName());
                networkNode.insert(enterpriseNode, j);

                organizationList = enterprise.getOrganizationDirectory().getOrganizationList();
                for (int k = 0; k < organizationList.size(); k++) {
                    organization = organizationList.get(k);
                    organizationNode = new DefaultMutableTreeNode(organization.getName());
                    enterpriseNode.insert(organizationNode, k);
                }
            }
        }

        model.reload();
    }

     private void populateNetworkAndEnterpriseComboBox() {
        networkJComboBox.removeAllItems();
        enterpriseTypeJComboBox.removeAllItems();

        for (Network network : system.getNetworkList()) {
            networkJComboBox.addItem(network);
        }

        for (Enterprise.EnterpriseType type : Enterprise.EnterpriseType.values()) {
            enterpriseTypeJComboBox.addItem(type);
        }

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTree = new javax.swing.JTree();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        selectedNodeJLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        submitNetworkJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        networkJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        networkNameJTextField = new javax.swing.JTextField();
        errNetworkNameJLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        enterpriseJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        networkJComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        enterpriseTypeJComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        entNameJTextField = new javax.swing.JTextField();
        submitEnterpriseJButton = new javax.swing.JButton();
        errEntNameJLabel = new javax.swing.JLabel();
        errNetworkJLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        enterpriseAdminJTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        networkJComboBox2 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        usernameJTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        enterpriseJComboBox2 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        nameJTextField2 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        passwordJPasswordField = new javax.swing.JPasswordField();
        jLabel11 = new javax.swing.JLabel();
        submitEmployeeJButton = new javax.swing.JButton();
        errUserNameAdminJLabel = new javax.swing.JLabel();
        errPasswordAdminJLabel = new javax.swing.JLabel();
        errEmpNameJLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        confirmJPasswordField = new javax.swing.JPasswordField();
        errMatchPassword = new javax.swing.JLabel();

        setLayout(new java.awt.CardLayout());

        jSplitPane1.setDividerLocation(300);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("System");
        JTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        JTree.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        JTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                JTreevalueChangedAction(evt);
            }
        });
        jScrollPane1.setViewportView(JTree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        selectedNodeJLabel.setText("<view_selected_node>");

        jLabel1.setText("Selected Node:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 839, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(197, 197, 197)
                    .addComponent(jLabel1)
                    .addGap(18, 18, 18)
                    .addComponent(selectedNodeJLabel)
                    .addContainerGap(353, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 654, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(232, 232, 232)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(selectedNodeJLabel))
                    .addContainerGap(402, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Home >> ", jPanel4);

        submitNetworkJButton.setText("Create Network");
        submitNetworkJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitNetworkJButtonActionPerformed(evt);
            }
        });

        networkJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(networkJTable);

        jLabel2.setText("Name");

        networkNameJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                networkNameJTextFieldFocusLost(evt);
            }
        });

        errNetworkNameJLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        errNetworkNameJLabel.setForeground(new java.awt.Color(255, 51, 102));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(networkNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(submitNetworkJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(errNetworkNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(269, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(submitNetworkJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(networkNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(26, 26, 26)
                .addComponent(errNetworkNameJLabel)
                .addContainerGap(251, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ManageNetwork >> ", jPanel1);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        enterpriseJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Enterprise Name", "Network", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(enterpriseJTable);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 65, 523, 115));

        jLabel3.setText("Network");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 231, -1, -1));

        networkJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel2.add(networkJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(294, 220, 161, 42));

        jLabel4.setText("Enterprise Type");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 287, -1, -1));

        enterpriseTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel2.add(enterpriseTypeJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(292, 285, 161, 39));

        jLabel5.setText("Name");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 360, -1, -1));

        entNameJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                entNameJTextFieldFocusLost(evt);
            }
        });
        jPanel2.add(entNameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(294, 360, 161, 39));

        submitEnterpriseJButton.setText("Create Enterprise");
        submitEnterpriseJButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                submitEnterpriseJButtonFocusLost(evt);
            }
        });
        submitEnterpriseJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitEnterpriseJButtonActionPerformed(evt);
            }
        });
        jPanel2.add(submitEnterpriseJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(294, 455, 162, 40));

        errEntNameJLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        errEntNameJLabel.setForeground(new java.awt.Color(255, 51, 102));
        jPanel2.add(errEntNameJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 408, 580, 29));

        errNetworkJLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        errNetworkJLabel.setForeground(new java.awt.Color(255, 51, 102));
        jPanel2.add(errNetworkJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(294, 271, 240, -1));

        jTabbedPane1.addTab("Manage Enterprise >>", jPanel2);

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        enterpriseAdminJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Enterprise Name", "Network", "Username"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(enterpriseAdminJTable);

        jPanel3.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 591, 112));

        jLabel6.setText("Network");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, -1, -1));

        networkJComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        networkJComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkJComboBox2ActionPerformed(evt);
            }
        });
        jPanel3.add(networkJComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 180, 152, 42));

        jLabel7.setText("Username");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 280, -1, -1));

        usernameJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                usernameJTextFieldFocusLost(evt);
            }
        });
        usernameJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameJTextFieldActionPerformed(evt);
            }
        });
        jPanel3.add(usernameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 280, 170, 39));

        jLabel8.setText("Enterprise");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 180, -1, -1));

        enterpriseJComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(enterpriseJComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 180, 170, 42));

        jLabel9.setText("Password");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 380, -1, -1));

        nameJTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                nameJTextField2FocusLost(evt);
            }
        });
        jPanel3.add(nameJTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 280, 154, 39));

        jLabel10.setText("Name");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, -1, -1));

        passwordJPasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordJPasswordFieldFocusLost(evt);
            }
        });
        jPanel3.add(passwordJPasswordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 380, 154, 41));

        jLabel11.setText("Enterprise Admin List");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 163, 32));

        submitEmployeeJButton.setText("Create Admin");
        submitEmployeeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitEmployeeJButtonActionPerformed(evt);
            }
        });
        jPanel3.add(submitEmployeeJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 520, 154, 39));

        errUserNameAdminJLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        errUserNameAdminJLabel.setForeground(new java.awt.Color(255, 51, 102));
        jPanel3.add(errUserNameAdminJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 330, 220, -1));

        errPasswordAdminJLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        errPasswordAdminJLabel.setForeground(new java.awt.Color(255, 51, 102));
        jPanel3.add(errPasswordAdminJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 440, 210, -1));

        errEmpNameJLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        errEmpNameJLabel.setForeground(new java.awt.Color(255, 51, 102));
        jPanel3.add(errEmpNameJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 330, 180, -1));

        jLabel12.setText("Confirm Password");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 380, -1, -1));

        confirmJPasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                confirmJPasswordFieldFocusLost(evt);
            }
        });
        jPanel3.add(confirmJPasswordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 380, 166, 45));

        errMatchPassword.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        errMatchPassword.setForeground(new java.awt.Color(255, 51, 102));
        jPanel3.add(errMatchPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 440, 220, -1));

        jTabbedPane1.addTab("Manage Enterprise Admin >> ", jPanel3);

        jSplitPane1.setRightComponent(jTabbedPane1);

        add(jSplitPane1, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void JTreevalueChangedAction(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_JTreevalueChangedAction
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) JTree.getLastSelectedPathComponent();
        if (selectedNode != null) {
            selectedNodeJLabel.setText(selectedNode.toString());
        }
    }//GEN-LAST:event_JTreevalueChangedAction

  public static int randInt(int min, int max) {

    // Usually this can be a field rather than a method variable
    Random rand = new Random();

    // nextInt is normally exclusive of the top value,
    // so add 1 to make it inclusive
    int randomNum = rand.nextInt((max - min) + 1) + min;

    return randomNum;
}
    
    private void submitNetworkJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitNetworkJButtonActionPerformed
         boolean flag = true;
         
         String networkName = networkNameJTextField.getText().trim();
        
        if(networkName.isEmpty()){
        
        errNetworkNameJLabel.setText("Please enter a network");
        flag = false;
        
        }
        
        if(!flagNetworkIsValidName){
            
            flag = false;
        }
        
         if(flag){
             
             
      
        
         final String NETWORKLOCATION = System.getProperty("user.dir")+"\\src\\Constants\\NetworkAndEnterpriseAdminDirectory.txt"; //  // path to the data store
          
         ReadFile rf = new ReadFile(NETWORKLOCATION);
         ArrayList<String> textFile = new ArrayList<>();
         
            try{
          textFile =  rf.readFileContents(); 

          String skyString = textFile.get(1);
          String[] skies = skyString.split("\\|");
          
       
          
             ArrayList<String> skyList = new ArrayList<>();
           for (int j =0; j<skies.length;j++){
         
          skyList.add(skies[j]);
           }
           
           
     

        Network network = system.createAndAddNetwork();
        network.setName(networkName);
        for(int i = 0;i<3;i++){
            
            ClimaticFactors cf = new ClimaticFactors();

         int temperature =randInt(0, 15);
         int humidity = randInt(30, 55);
         int windSpeed = randInt(10, 15);
         
            Collections.shuffle(skyList);
          cf.setSky(skyList.get(0));
          cf.setHumidity(humidity);
          cf.setTemperature(temperature);
          cf.setWindSpeed(windSpeed);
          
          network.getClimaticFactorHistory().getClimaticFactorList().add(cf);
        
        
        }
       
        populateTree();
        populateNetworkTable();
        populateNetworkComboBox();
        populateNetworkAndEnterpriseComboBox();
        
        JOptionPane.showMessageDialog(this, "Network created successfully");
         }catch(Exception e){
                
                JOptionPane.showMessageDialog(this, "Constants file missing");
            }
         }
    }//GEN-LAST:event_submitNetworkJButtonActionPerformed

    
     private void populateNetworkTable() {
        DefaultTableModel model = (DefaultTableModel) networkJTable.getModel();

        model.setRowCount(0);
        for (Network network : system.getNetworkList()) {
            Object[] row = new Object[1];
            row[0] = network.getName();
            model.addRow(row);
        }
    }
    
    
    private void submitEnterpriseJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitEnterpriseJButtonActionPerformed

        Network network = (Network) networkJComboBox.getSelectedItem();
        Enterprise.EnterpriseType type = (Enterprise.EnterpriseType) enterpriseTypeJComboBox.getSelectedItem();
boolean flag = true;
        if (network == null){
            
          errNetworkJLabel.setText("No Network Created");
          flag = false;  
            
        }
        

        String name = entNameJTextField.getText().trim();
        
        if(name.isEmpty()){
            
            errEntNameJLabel.setText("Enterprise name can not be empty");
            flag = false;
        }
        
        if(!flagValidEntName){
            
            flag = false;
        }
        
        if(flag){

        Enterprise enterprise = network.getEnterpriseDirectory().createAndAddEnterprise(name, type);
 
        JOptionPane.showMessageDialog(this, "Enterprise successfuly created in "+network.getName());
        
        populateEnterpriseTable();
        }
    }//GEN-LAST:event_submitEnterpriseJButtonActionPerformed

     private void populateEnterpriseTable() {
        DefaultTableModel model = (DefaultTableModel) enterpriseJTable.getModel();

        model.setRowCount(0);
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                Object[] row = new Object[3];
                row[0] = enterprise.getName();
                row[1] = network.getName();
                row[2] = enterprise.getEnterpriseType().getValue();

                model.addRow(row);
            }
        }
    }
    
     
    private void populateNetworkComboBox(){
        networkJComboBox2.removeAllItems();
        
        for (Network network : system.getNetworkList()){
            networkJComboBox2.addItem(network);
        }
    }
    
    private void populateEnterpriseComboBox(Network network){
        enterpriseJComboBox2.removeAllItems();
        
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
            enterpriseJComboBox2.addItem(enterprise);
        }
        
    }
     
    private void networkJComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkJComboBox2ActionPerformed

        Network network = (Network) networkJComboBox2.getSelectedItem();
        if (network != null){
            populateEnterpriseComboBox(network);
        }

    }//GEN-LAST:event_networkJComboBox2ActionPerformed

    private void submitEmployeeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitEmployeeJButtonActionPerformed
boolean flag = true;
        Enterprise enterprise = (Enterprise) enterpriseJComboBox2.getSelectedItem();

        String username = usernameJTextField.getText().trim();
        String password = String.valueOf(passwordJPasswordField.getPassword());
         String conFirmPassword = String.valueOf(confirmJPasswordField.getPassword());
        String name = nameJTextField2.getText().trim();
          if(name.isEmpty()){
            
            errEmpNameJLabel.setText("Please enter Name");
            flag = false;
            
        }
        
        if(username.isEmpty()){
            
            errUserNameAdminJLabel.setText("Username can not be empty");
            flag = false;
            
        }
        
         if(password.isEmpty()){
            
            errPasswordAdminJLabel.setText("Please enter a password");
            flag = false;
            
        }
         
           if(conFirmPassword.isEmpty()){
            
            errMatchPassword.setText("Please confirm password");
            flag = false;
            
        }
         
        if(flagIsAdminUSernameValid  && flagPasswordIsValid && flagPasswordMatch && flagvalidName ){
            
            
        }
        else{
            flag = false;
        }
        
        if(flag){
            
        
        

      //  Employee employee = enterprise.getEmployeeDirectory().createEmployee(name);
     Employee employee = new Admin();
     employee.setName(name); 
        UserAccount account = enterprise.getUserAccountDirectory().createUserAccount(username, password, employee, new AdminRole());
        populateEnterpriseAdminTable();
        JOptionPane.showMessageDialog(this, "Admin and user account created successfully");
        refreshUserCreationForm();
        }
    }//GEN-LAST:event_submitEmployeeJButtonActionPerformed
    
    
    public void  refreshUserCreationForm(){
        
        
        usernameJTextField.setText("");
        nameJTextField2.setText("");
        passwordJPasswordField.setText("");
        confirmJPasswordField.setText("");
        //confirmJPasswordField.cut();
        
    }
    
    boolean flagNetworkIsValidName = true;
    private void networkNameJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_networkNameJTextFieldFocusLost
        // TODO add your handling code here:
        
        String networkName = networkNameJTextField.getText();
        
        if(!networkName.trim().isEmpty()){
            if(Utility.notLongerThanRequired(networkName.trim().length(), 20)){
            
            if(Utility.isValidName(networkName)){
                
               errNetworkNameJLabel.setText("");
               flagNetworkIsValidName = true;
            }else{
                errNetworkNameJLabel.setText("Please enter a valid network name. (Format : 0-9 a-z A-z , # -)");
                //0-9a-zA-Z_,#-
                flagNetworkIsValidName = false;
            }
        }
        }else{
              errNetworkNameJLabel.setText("Please enter a network name");
               flagNetworkIsValidName = false;
        }
        
        
    }//GEN-LAST:event_networkNameJTextFieldFocusLost

    private void submitEnterpriseJButtonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_submitEnterpriseJButtonFocusLost
      
    }//GEN-LAST:event_submitEnterpriseJButtonFocusLost
boolean flagValidEntName = true;
    private void entNameJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_entNameJTextFieldFocusLost
       String entName = entNameJTextField.getText().trim();
       if(!entName.isEmpty()){
       if(Utility.isValidAlphanumericName(entName)){
           
        errEntNameJLabel.setText("");
        flagValidEntName = true;  
       }
       else{
           
         errEntNameJLabel.setText("Invalid name ! Enterprise name can have only letters, numbers and spaces");
        flagValidEntName = false;    
       }
       }else{
         errEntNameJLabel.setText("Enterprise name can not be empty");
        flagValidEntName = false;  
           
       }
    }//GEN-LAST:event_entNameJTextFieldFocusLost
  boolean flagIsAdminUSernameValid;
    private void usernameJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameJTextFieldFocusLost
       
        String userName = usernameJTextField.getText().trim();
        
             if(!userName.isEmpty()){
             
             if(Utility.notLongerThanRequired(userName.length(),10)){
                 
             
             if(Utility.isAlphanumeric(userName)){ // for validusername

        if(checkUsernameExists(userName)){
            errUserNameAdminJLabel.setText("UserName Already Exists. Please choose another username");
           flagIsAdminUSernameValid = false;
          //  JOptionPane.showMessageDialog(this, "UserName Already Exists. Please choose another username");
        }else{
           errUserNameAdminJLabel.setText("");
           flagIsAdminUSernameValid = true; 
        }
             }else{
                 
                  errUserNameAdminJLabel.setText("User name can be only alphanumeric. No special Characters and no spaces allowed.");
                  flagIsAdminUSernameValid = false;  
             }
             }else{
             errUserNameAdminJLabel.setText("User name can not be longer than 10 places.");
                  flagIsAdminUSernameValid = false;  
         }
         }
         else{
             errUserNameAdminJLabel.setText("Please enter a userName");
           flagIsAdminUSernameValid = false;  
         }
        
        
    }//GEN-LAST:event_usernameJTextFieldFocusLost
boolean flagPasswordIsValid;
    private void passwordJPasswordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordJPasswordFieldFocusLost
       
        
          char[] passwordCharArray = passwordJPasswordField.getPassword();
        String password = String.valueOf(passwordCharArray);
     
     if(!password.isEmpty()){
         
      if(Utility.notLongerThanRequired(password.length(), 20))   {
         if(Utility.validPassword(password)){
              errPasswordAdminJLabel.setText("");
             flagPasswordIsValid = true;
             
         }else{
             
             errPasswordAdminJLabel.setText("Password Invalid. (Format : A-Z a-z 0-9 _&^%$#!~@- and no spaces)");
             flagPasswordIsValid = false;
         }
      }
      else{
           errPasswordAdminJLabel.setText("Password can have only upto 20 characters");
             flagPasswordIsValid = false; 
      }
         
     }
    }//GEN-LAST:event_passwordJPasswordFieldFocusLost
boolean flagPasswordMatch = true;
    private void confirmJPasswordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_confirmJPasswordFieldFocusLost
         char[] passwordConfirmCharArray = confirmJPasswordField.getPassword();
        String passwordConfirm = String.valueOf(passwordConfirmCharArray);
        
            char[] passwordCharArray = passwordJPasswordField.getPassword();
        String password = String.valueOf(passwordCharArray);
        
        
        if(passwordConfirm.equals(password)){
            
            errMatchPassword.setText("");
            flagPasswordMatch = true;
        }else{
            
            errMatchPassword.setText("Passwords do not match");
            flagPasswordMatch = false;
        }
        
        
    }//GEN-LAST:event_confirmJPasswordFieldFocusLost
boolean flagvalidName = true;
    private void nameJTextField2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameJTextField2FocusLost
         String empName = nameJTextField2.getText().trim();
      
      if(!empName.isEmpty()){
      if(Utility.notLongerThanRequired(empName.length(), 20)){
      if(!Utility.isValidName(empName)){
          
          errEmpNameJLabel.setText("Name can contain only alphabets and spaces.");
          flagvalidName= false;
          
      }else{
          
          errEmpNameJLabel.setText("");
          flagvalidName= true; 
      }
      
      }
      else{
           errEmpNameJLabel.setText("Name can not be greater than 20 alphabets");
        //   empNameJTextField.setText("");
          flagvalidName= false; 
      }
      }
      else{
          
           errEmpNameJLabel.setText("Name can not be empty");
          flagvalidName= false;  
      }
          
                         
    }//GEN-LAST:event_nameJTextField2FocusLost

    private void usernameJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameJTextFieldActionPerformed

        public boolean  checkUsernameExists(String userName){
        boolean ifExists = false;
        
        
       for(UserAccount ua : system.getUserAccountDirectory().getUserAccountList()){
           
           if(ua.getUsername().equals(userName)){
              ifExists =true;  
           }
           
           else{

        for(Network  n : system.getNetworkList()){
            
            for(Enterprise enterprise : n.getEnterpriseDirectory().getEnterpriseList()){
                
            
        for(UserAccount u: enterprise.getUserAccountDirectory().getUserAccountList()){
            
            if(u.getUsername().equals(userName)){
                ifExists =true;
            }
            
            else {
                
                for(Organization o : enterprise.getOrganizationDirectory().getOrganizationList()){
                    for(UserAccount u2 : o.getUserAccountDirectory().getUserAccountList()){
                      if(u2.getUsername().equals(userName)){
                ifExists =true;
            }   
                        
                    }
                }
            }
            
        }
        }
        
        }
        
         }
           
       }
        return ifExists;
    }
    
     private void populateEnterpriseAdminTable() {
        DefaultTableModel model = (DefaultTableModel) enterpriseAdminJTable.getModel();

        model.setRowCount(0);
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                    Object[] row = new Object[3];
                    row[0] = enterprise.getName();
                    row[1] = network.getName();
                    row[2] = userAccount.getUsername();

                    model.addRow(row);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree JTree;
    private javax.swing.JPasswordField confirmJPasswordField;
    private javax.swing.JTextField entNameJTextField;
    private javax.swing.JTable enterpriseAdminJTable;
    private javax.swing.JComboBox enterpriseJComboBox2;
    private javax.swing.JTable enterpriseJTable;
    private javax.swing.JComboBox enterpriseTypeJComboBox;
    private javax.swing.JLabel errEmpNameJLabel;
    private javax.swing.JLabel errEntNameJLabel;
    private javax.swing.JLabel errMatchPassword;
    private javax.swing.JLabel errNetworkJLabel;
    private javax.swing.JLabel errNetworkNameJLabel;
    private javax.swing.JLabel errPasswordAdminJLabel;
    private javax.swing.JLabel errUserNameAdminJLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField nameJTextField2;
    private javax.swing.JComboBox networkJComboBox;
    private javax.swing.JComboBox networkJComboBox2;
    private javax.swing.JTable networkJTable;
    private javax.swing.JTextField networkNameJTextField;
    private javax.swing.JPasswordField passwordJPasswordField;
    private javax.swing.JLabel selectedNodeJLabel;
    private javax.swing.JButton submitEmployeeJButton;
    private javax.swing.JButton submitEnterpriseJButton;
    private javax.swing.JButton submitNetworkJButton;
    private javax.swing.JTextField usernameJTextField;
    // End of variables declaration//GEN-END:variables
}
   // red  [255,51,102]